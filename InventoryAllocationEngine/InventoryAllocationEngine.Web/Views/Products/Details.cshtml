@using InventoryAllocationEngine.Web.Services.Enumerations
@model InventoryAllocationEngine.Web.Models.Product
@{
   ViewBag.Title = Model.Description;

   int overshort = Model.QuantityAvailable - Model.OrderItems.Sum(oi => oi.QuantityOrdered);
}

<h2 class="page-header">
   @Model.Description
</h2>

<p>
   Pending Orders: @Model.OrderItems.Sum(oi => oi.QuantityOrdered)
</p>
<p>
   Quantity Available: @Model.QuantityAvailable
</p>
<p>
   Over/(Short): <span class="@(overshort < 0 ? "text-danger" : "")"> @(overshort < 0 ? "(" + Math.Abs(overshort) + ")" : overshort.ToString())</span>

</p>

<h3>Orders</h3>
@if (Model.OrderItems.Any())
{
   <div id="allocateForm" style="padding-top: 10px; padding-bottom: 10px; margin-bottom: 10px; border-bottom: 1px solid #ddd; border-top: 1px solid #ddd">

      @using (Html.BeginForm("Allocate", "Products", FormMethod.Post, new {@class = "form-inline"}))
      {
         @Html.HiddenFor(model => model.Id)
         <div class="form-group">
            @Html.Label("allocationMethod", "Allocation method: ")

            @Html.DropDownList("allocationMethod",
               EnumHelper.GetSelectList(typeof(AllocationMethod)),
               new {@class = "form-control"})

            &nbsp;&nbsp;

            @Html.Label("weighting", "Weighting: ")

            @Html.DropDownList("weighting", new List<SelectListItem>
            {
               new SelectListItem
               {
                  Text = "None",
                  Value = "0"
               },
               new SelectListItem
               {
                  Text = "Light",
                  Value = "0.25"
               },
               new SelectListItem
               {
                  Text = "Moderate",
                  Value = "0.5"
               },
               new SelectListItem
               {
                  Text = "Heavy",
                  Value = "0.75"
               },
               new SelectListItem
               {
                  Text = "Full",
                  Value = "1"
               }
            }, new {@class = "form-control"})

            &nbsp;&nbsp;

         </div>

         <button type="submit" class="btn btn-primary">Allocate</button>

      }

   </div>

   <table class="table">
      <colgroup>
         <col span="5">
         <col span="2" style="background-color: #EFEFEF">
         <col span="2"style="background-color: #D7F4A8">
      </colgroup>
      <thead>
      <tr>
         <th colspan="5">&nbsp;</th>
         <th colspan="2">
            Unweighted Allocation
         </th>
         <th colspan="2">
            Weighted Allocation
         </th>
      </tr>

      <tr>
         <th>
            Order No.
         </th>
         <th>
            Date Received
         </th>
         <th>
            Customer
         </th>
         <th>
            Unit Price
         </th>
         <th>
            Qty. Ordered
         </th>
         <th>
            Quantity
         </th>
         <th>
            Revenue
         </th>
         <th>
            Quantity
         </th>
         <th>
            Revenue
         </th>
      </tr>

      </thead>
      <tbody>
      @foreach (var orderItem in Model.OrderItems.OrderBy(oi => oi.Order.DateReceived))
      {
         <tr>
            <td>
               @orderItem.Order.Id
            </td>
            <td>
               @orderItem.Order.DateReceived.ToString("g")
            </td>
            <td>
               <span style="cursor: help; text-decoration: underline;" 
                     title="Avg Anl Vol: @orderItem.Order.Customer.AverageAnnualVolume.ToString("C0")
AP Age: @orderItem.Order.Customer.AccountsPayableAge
DUNS: @orderItem.Order.Customer.DUNSScore">@orderItem.Order.Customer.Name
               </span>
            </td>

            <td>
               @orderItem.UnitPrice.ToString("C")
            </td>
            <td>
               @orderItem.QuantityOrdered
            </td>
            <td>
               @orderItem.QuantityAllocatedUnweighted
            </td>
            <td>
               @orderItem.UnweightedExtension.ToString("C")
            </td>
            <td>
               @orderItem.QuantityAllocatedWeighted
            </td>
            <td>
               @orderItem.WeightedExtension.ToString("C")
            </td>
         </tr>
      }
      <tr>
         <th colspan="4" class="text-right">
            Totals:
         </th>
         <th>
            @Model.OrderItems.Sum(oi => oi.QuantityOrdered)
         </th>
         <th>
            @Model.OrderItems.Sum(oi => oi.QuantityAllocatedUnweighted)
         </th>
         <th>
            @Model.OrderItems.Sum(oi => oi.UnweightedExtension).ToString("C")
         </th>
         <th>
            @Model.OrderItems.Sum(oi => oi.QuantityAllocatedWeighted)
         </th>
         <th>
            @Model.OrderItems.Sum(oi => oi.WeightedExtension).ToString("C")
         </th>
      </tr>
      </tbody>
   </table>
}
else
{
   <p><i>There are no orders for this product.</i></p>
}

<script type="text/javascript">
   $(function () {
      var isDisabled = @(overshort) >= 0;

      if (isDisabled) {
         $('#allocateForm :input').prop('disabled', true);
         $('#allocateForm').css('opacity', 0.4);
      } 
   });
</script>
